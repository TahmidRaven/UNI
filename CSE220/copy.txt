c=0
temp=self.head 
while temp!=None:
if c==idx: 
return temp
c+=1
temp=temp.next 
return None
def get(self, idx):
c=0
temp=self.head
while temp!=None:
if c==idx:
return temp.element 
c+=1
temp=temp.next 
return None
def set(self, idx, e): 
temp=self.head 
c=0
n=0
while temp!=None: 
if c==idx:
n=temp.element 
temp.element=e
return n 
temp=temp.next 
c+=1
return None
# returns the index of the Node containing the given element. 
# if the element does not exist in the List, return -1.
def indexOf(self, e):
c=0
temp=self.head 
while temp!=None:
if temp.element==e: 
return ctemp=temp.next 
c+=1
return -1
# returns true if the element exists in the List, return false otherwise. 
def contains(self, e):
temp=self.head 
while temp!=None:
if temp.element==e: 
return True
temp=temp.next 
return False
# Makes a duplicate copy of the given List. Returns the reference of the duplicate list. 
def copyList(self):
new= self.head 
tail = new
temp = self.head.next 
while temp != None:
n1= Node(temp.element, None) 
tail.next = n1
tail = tail.next 
temp = temp.next
return new
# Makes a reversed copy of the given List. Returns the head reference of the reversed list. 
def reverseList(self):
rev = Node(self.head.element, None) 
temp = self.head.next
while temp != None:
n1 = Node(temp.element, rev) 
rev = n1
temp = temp.next 
return rev
# inserts Node containing the given element at the given index 
# Check validity of index.
def insert(self, e, idx):
temp = self.head
n1 = Node(e, None) 
if idx > self.countNode():
return 'Invalid Index' 
elif idx == 0:
self.head = n1 
n1.next = tempelif temp.next == None: 
temp = temp.next 
temp.next = n1
else:
n2 = self.nodeAt(idx) 
n3 = self.nodeAt(idx - 1) 
n1.next = n2
n3.next = n1
# removes Node at the given index. returns element of the removed node. 
# Check validity of index. return None if index is invalid.
def remove(self, idx):
if idx > self.countNode(): 
return None
elif idx == 0: 
new = self.head
self.head = self.head.next 
return new.element
else:
remove = self.nodeAt(idx) 
n1 = self.nodeAt(idx + 1) 
n2 = self.nodeAt(idx - 1) 
n2.next = n1
return remove.element
# Rotates the list to the left by 1 position. 
def rotateLeft(self):
temp = self.head
self.head = self.head.next 
n = self.countNode() - 1 
self.nodeAt(n).next = temp
temp.next = None
# Rotates the list to the right by 1 position. 
def rotateRight(self):
temp = self.countNode() - 1
n = self.nodeAt(temp)
self.nodeAt(temp - 1).next = None 
n.next = self.head
self.head = n 
print("////// Test 01 //////") 
a1 = [10, 20, 30, 40]
h1 = LinkedList(a1) # Creates a linked list using the values from the array 
# head will refer to the Node that contains the element from a[0]h1.printList() # This should print: 10,20,30,40 
print(h1.countNode()) # This should print: 4
print("////// Test 02 //////")
# returns the reference of the Node at the given index. For invalid idx return None. 
myNode = h1.nodeAt(1)
print(myNode.element) # This should print: 20. In case of invalid index This will generate an 
Error.
print("////// Test 03 //////")
# returns the element of the Node at the given index. For invalid idx return None. 
val = h1.get(2)
print(val) # This should print: 30. In case of invalid index This will print None. 
print("////// Test 04 //////")
# updates the element of the Node at the given index.
# Returns the old element that was replaced. For invalid index return None. 
# parameter: index, element
print(h1.set(1,85)) # This should print: 20 
h1.printList() # This should print: 10,85,30,40. 
print(h1.set(15,85)) # This should print: None 
h1.printList() # This should print: 10,85,30,40.
print("////// Test 05 //////")
# returns the index of the Node containing the given element. 
# if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that doesn't exists in the list this will print 
-1.
print("////// Test 06 //////")
# returns true if the element exists in the List, return false otherwise. 
ask = h1.contains(40)
print(ask) # This should print: True. 
print("////// Test 07 //////")
a2 = [10,20,30,40,50,60,70]
h2 = LinkedList(a2) # uses theconstructor where a is an built in list 
h2.printList() # This should print: 10,20,30,40,50,60,70.# Makes a duplicate copy of the given List. Returns the head reference of the duplicate list. 
copyH=h2.copyList() # Head node reference of the duplicate list
h3 = LinkedList(copyH) # uses the constructor where a is head of a linkedlist 
h3.printList() # This should print: 10,20,30,40,50,60,70.
print("////// Test 08 //////") 
a4 = [10,20,30,40,50]
h4 = LinkedList(a4) # uses theconstructor where a is an built in list 
h4.printList() # This should print: 10,20,30,40,50.
# Makes a reversed copy of the given List. Returns the head reference of the reversed list. 
revH=h4.reverseList() # Head node reference of the reversed list
h5 = LinkedList(revH) # uses the constructor where a is head of a linkedlist 
h5.printList() # This should print: 50,40,30,20,10.
print("////// Test 09 //////") 
a6 = [10,20,30,40]
h6 = LinkedList(a6) # uses theconstructor where a is an built in list 
h6.printList() # This should print: 10,20,30,40.
# inserts Node containing the given element at the given index. Check validity of index. 
h6.insert(85,0)
h6.printList() # This should print: 85,10,20,30,40. 
h6.insert(95,3)
h6.printList() # This should print: 85,10,20,95,30,40. 
h6.insert(75,6)
h6.printList() # This should print: 85,10,20,95,30,40,75. 
print("////// Test 10 //////")
a7 = [10,20,30,40,50,60,70]
h7 = LinkedList(a7) # uses theconstructor where a is an built in list 
h7.printList() # This should print: 10,20,30,40,50,60,70.
# removes Node at the given index. returns element of the removed node. 
# Check validity of index. return None if index is invalid.
print("Removed element:",h7.remove(0)) # This should print: Removed element: 10 
h7.printList() # This should print: 20,30,40,50,60,70.
print("Removed element: ",h7.remove(3)) # This should print: Removed element: 50 
h7.printList() # This should print: 20,30,40,60,70.
print("Removed element: ",h7.remove(4)) # This should print: Removed element: 70 
h7.printList() # This should print: 20,30,40,60.print("////// Test 11 //////") 
a8 = [10,20,30,40]
h8 = LinkedList(a8) # uses theconstructor where a is an built in list 
h8.printList() # This should print: 10,20,30,40.
# Rotates the list to the left by 1 position. 
h8.rotateLeft()
h8.printList() # This should print: 20,30,40,10. 
print("////// Test 12 //////")
a9 = [10,20,30,40]
h9 = LinkedList(a9) # uses theconstructor where a is an built in list 
h9.printList() # This should print: 10,20,30,40.
# Rotates the list to the right by 1 position. 
h9.rotateRight()
h9.printList() # This should print: 40,10,20,30. 
\